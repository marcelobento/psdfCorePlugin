# Patrones

Un patron esta representado por una clase heredada de BasePattern. El PDSF cuenta
ya con un conjunto de patrones pudiendo extenderlos o desarrollarse nuevos en un
proyecto en particular.

En *plugins/psdfPlugin/lib/pattern/* se encuentran los patrones del PSDF

En *lib/pattern* los extendidos del psdf o nuevos patrones.

Cada patron es almacenado en una subcarpeta. Por ejemplo para el patron MiOperacion
tendriamos:

    ../lib/pattern/mi_operacion/MiOperacionPattern.class.php
    ../lib/pattern/mi_operacion/template.php

Notar que el nombre de la clase es con notacion CamelCase y su carpeta con
underscore. Esta normalizacion debe respetarse.

## Estructura

Como ejemplo veremos en detalle el patron MiOperacion. Este patron realiza una
operacion aritmetica. Recibe como parametros los dos operandos y el operador,
retornando el resultado de la operacion. Esta seria la estructura basica del
patron MiOperacion:

*lib/pattern/MiOperacion/MiOperacionPattern.class.php*:

    01 <?php
    02  
    03 class MiOperacionPattern extends BasePattern
    04 {
    05  protected
    06    $in_operando1,       // Primer operando
    07    $in_operando2,       // Segundo operando
    08    $in_operador,        // El operador
    09    $out_resultado,      // El resultado
    10
    11 public function execute()
    12 {
    13   switch ($this->getParameter('in_operador'))
    14   {
    15     case "+":
    16       $res = $this->getParameter('in_operando1') + $this->getParameter('in_operando1'); 
    17     case "*":
    18       $res = $this->getParameter('in_operando1') * $this->getParameter('in_operando1'); 
    19     case "/":
    20       $res = $this->getParameter('in_operando1') / $this->getParameter('in_operando1'); 
    21   }
    22
    23   $this->setParameter(out_resultado, $res);
    24
    25   $this->setTplParameter('operando1', $in_operando1);
    26   $this->setTplParameter('operando2', $in_operando2);
    27   $this->setTplParameter('operador', $in_operador);
    28   $this->setTplParameter('resultado', $res);
    29 }

*lib/pattern/template.php*:

    01 <p>Operacion: <?php echo $operando1.' '.$operador.' '.$operando2 ?></p> 
    02 <p>Resultado: <?php echo $resultado ?></p> 

## Creando el patron

El patron se define creando una clase heredada de BasePattern y tiene ademas el
posfijo Pattern:

    02 ...
    03 class MiOperacionPattern extends BasePattern
    04 ...

## Definiendo parametros al patron

Los parametros se definen como atributos de la propia clase. Y deben comenzar con
los prefijos *in_* y *out_* indicando si es de entrada o salida, respectivamente.

    04 ...
    05  protected
    06    $in_operando1,       // Primer operando
    07    $in_operando2,       // Segundo operando
    08    $in_operador,        // El operador
    09    $out_resultado,      // El resultado
    10 ...

Por supuesto, el patron puede contar con otras variables internas propias, las
cuales pueden definirse normalmente.
    
## Recuperando y retornando parametros del patron

El recupero y retorno de parametros del patron se lleva a cabo mediante los metodos
getParameter() y setParameter(), respectivamente.

Recuperando el valor del parametro *in_operado*:

*lib/pattern/MiPatronPattern.class.php*:
    
    12   ...
    13   switch ($this->getParameter('in_operador'))
    14   ...

Asignando un valor al parametro de salida *out_resultado*:

*lib/pattern/MiPatronPattern.class.php*:

    22   ...
    23   $this->setParameter('out_resultado', $res);
    24   ...

## Pasando datos a la interfaz del patron

Esto se realiza mediante el metodo setTplParameter()

Pasando a la interfaz en *$resultado* el valor de *$res*

*lib/pattern/MiPatronPattern.class.php*:
    
    27   ...
    28   $this->setTplParameter('resultado', $res);
    29   ...

Esto permite que desde la plantilla la variable sea accedida como $resultado:

*lib/pattern/template.php*:

    01 ... 
    02 <p>Resultado: <?php echo $resultado ?></p> 
    03 ...

Se toma este criterio, y no asumir directamente todos los parametros y variables
que ya tenga el patron para evitar recargar informacion en la pantilla mas que
la necesaria.
    
## Procesando informacion de la interfaz

El patron *miOperacion* resuelve su logica en la clase y solamente muestra el
resultado en un formulario. En otros patrones puede ser necesario ademas
procesar la informacion del formulario.

Esto se lleva a cabo definiendo, en la clase del patron, el metodo *resume()*.
El tratamiento es el indicado por symfony. En el parametro *$request* estan los
campos del formulario y pueden accesarse con el metodo *getParameter()*.

    public function resume($request)
    {
      ...
      $valor = $request->getParameter('calculo');
      $this->setParameter('out_resultado1', $valor);
      ...
    }

Este ejemplo recupera en *$valor* el valor del campo *calculo* del formulario.
Luego asigna ese valor como retorno del patron en el parametro *out_resultado1*.

## Probando la ejecucion de patrones

desde el modulo *psdfTestPattern* pueden testearse los patrones. En el campo
*Definicion* se expresa la notacion de llamada en YML y luego se ejecuta. El
resultado se actualiza en la misma notacion YML.

Definiendo la llamada:

    MiOperacion:
      Params:
        in_operando1: 15
        in_operando2: 20
        in_operador:  +

Resultado luego de ejecutarla:

    MiOperacion:
      Params:
        in_operando1: 15
        in_operando2: 20
        in_operador:  +
        out_resultado: 35

