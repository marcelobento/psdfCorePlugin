<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginProceso extends BaseProceso
{
  // Dom xpdl
  var $xml = null;
	
	public function __toString(){
    return $this->getNombre();
  }

  public function getNombreConPaquete(){
  	return $this->getRelPaquete().' -- '.$this->getNombre();
  }

  /**
   * Inserta un esqueleto proceso xpdl en un paquete xpdl
   * @return unknown_type
   */
  public function generate()
  {  	
  	$pack = Doctrine::getTable('Paquete')->find($this->getRelPaquete());
  	$macro = $pack->getMacroPaquete();
  	if(!$macro)
  	{
      throw new sfException(sprintf('No puede generar un proceso dentro de un Macro "%s"', $pack->getNombre()));	
  	}
  	
    $arguments['application'] = $macro->getXpdlId();
  	$arguments['module'] = $pack->getXpdlId();
    $arguments['process_id'] = $this->getXpdlId();
    $arguments['process_name'] = $this->getNombre();
    $arguments['process_display_name'] = $this->getNombre();
    $options = array();
    $app = new psdfGenerateProcess();
    $app->execute($arguments, $options);
  }  

  public function postSave($event)
  {
  	// Aviso al paquete padre que genere o actualize el xpdl 
  	// con la definicion del proceso
    $pack = Doctrine::getTable('Paquete')->find($this->getRelPaquete());
    $pack->updateXpdlProcess($this->getXpdlId(), $this->getXpdlName(), $this->getNombre());
    $pack->save();
  }
  
  public function postDelete($event)
  {
    // Aviso al paquete padre que actualize el xpdl 
    // quitando el proceso borrado
  	$pack = Doctrine::getTable('Paquete')->find($this->getRelPaquete());
    $pack->deleteXpdlProcess($this->getXpdlId());
    $pack->save();  	
  }
      
  /**
   * Construccion del proceso
   * 
   * @param $pMacroXpdlName       Name xpdl del Paquete Macro
   * @param $pPackXpdlName        Name xpdl del Paquete
   * @param $pDomXpdl           Dom xpdl del paquete
   * @param $pTypeDeclarations  Array con info de los tipos declarados del paquete
   * @param $pDataFields        Array con info de los datafields del paquete
   * @param $pParticipants      Array con info de participantes del paquete
   * @return unknown_type
   */
  public function build( $pMacroXpdlName, $pPackXpdlName, $pDomXpdl, $pTypeDeclarations, $pDataFields, $pParticipants )
  {
  	// Dejo accesible a toda la clase la instancia dom xpdl
  	$this->xml = $pDomXpdl;
  	
    // Obtengo array datafields (concateno a los posibles que vengan del paquete)
    $dataFields = $this->xpdlGetDataFields($pDataFields);
        
    // Obtengo array participantes
    $participants = $this->xpdlGetParticipants($pParticipants);

    // Parametros del proceso
    //$parameters = $this->xpdlGetParameters();
    
    // Recorro sus actividades    
    $xp = new domxpath( $this->xml );
    $nodeList = $xp->query( "/xpdl2:Package/xpdl2:WorkflowProcesses/xpdl2:WorkflowProcess[ @Id = \"" . 
                $this->getXpdlId() . "\"]/xpdl2:Activities/xpdl2:Activity" );
    foreach ( $nodeList as $nodeActivity )    
    {
    	$activityXpdlId = $nodeActivity->getAttribute('Id');
    	$activityXpdlName = $nodeActivity->getAttribute('Name');
    	
      $activityType = $this->xpdlGetActivityType($nodeActivity);
      $activityIsAutocomplete = $this->xpdlGetActivityIsAutoComplete($activityXpdlId);
      
      $scriptSetDF = '';
      $ptnName = '';
      $scriptPtnSetParams = '';
      $scriptPtnSetTemplate = '';
      $scriptNA = '';
      
      if( $activityType=='StartEvent' )    	
    	{    		
    		// PERSONALIZAR ACTIVIDAD INICIO
    		
    		// Genero script Inicializacion de datafields
    		foreach( $dataFields as $key => $datafield )
    		{    			
    			// $this->f->setDataField('datafield', 'value');
    			$scriptSetDF.= "%sthis->f->setDataField('%s', '%s');%s";
    			$scriptSetDF = sprintf($scriptSetDF, chr(36), $key,$datafield["initialValue"], chr(10) );
    		}    		
    	}
      elseif( $activityType=='EndEvent' )
      { 
      	// PERSONALIZAR ACTIVIDAD FIN
      	     	
      }
      elseif( $activityType=='TaskUser' or $activityType=='TaskManual' or $activityType=='TaskScript' )
      {
      	// PERSONALIZAR ACTIVIDADES DE TIPOS YA IMPLEMENTADOS
      	
        // Tratamiento de patrones
      	// Hoy UN SOLO patron       	
      	$patterns = $this->xpdlGetPatterns($activityXpdlId);
      	if( count($patterns)==1 )
      	{      		      		
      		foreach( $patterns as $key => $pattern )
      		{
	          // Valido exista el patron
	          
	          if( !UtilPattern::exists($key))
		        {
		          throw new sfException(sprintf('No existe el patron "%s" asociado a la actividad "%s"', $key, $activityXpdlName));
		        }
		        
		        $cls = $key.'Pattern';
		        $ptn = new $cls;
		        
		        $ptnName = $ptn->getName();
		        		               			
            // Genero script de lectura de parametros a pasar al patron         
	          
	          foreach( $pattern['Params'] as $param => $value )
      			{
	      			if( isset($dataFields[$value]) )
	      			{
                // Es un dataField: $ptn->setParameter( 'param', $this->f->getDataField('datafield') );
                $scriptPtnSetParams.= "%sptn->setParameter( '%s', %sthis->f->getDataField('%s') );%s";
                $scriptPtnSetParams = sprintf($scriptPtnSetParams, chr(36), $param, chr(36), $value, chr(10));
	      			}
	      			elseif( strpos($value, '%') and strrpos($value, '%') )
	      			{
	              // Es una variable de entorno: $ptn->setParameter( 'param', $this->f->getContextVar('var') );
                $scriptPtnSetParams.= "%sptn->setParameter( '%s', %sthis->f->getContextVar('%s') );%s";
                $scriptPtnSetParams = sprintf($scriptPtnSetParams, chr(36), $param, chr(36), $value, chr(10));
 	      			}
	      			else
	      			{     		
                // Es un numerico/alfanumerico: $ptn->setParameter( 'param', 'valor' );
                $scriptPtnSetParams.= "%sptn->setParameter( '%s', '%s' );%s";
                $scriptPtnSetParams = sprintf($scriptPtnSetParams, chr(36), $param, $value, chr(10));
	      			}
      			}
      			
      			// Si el patron tiene interfaz paso a la accion/template los parametros
      			
      			if( $ptn->hasTemplate() )
      			{
		      		/* Omitido porque ahora los parametros se pasan con parseTemplateParams() en la accion
      				foreach( $pattern['Params'] as $param => $value )
		          {
	              // $this->param = $ptn->getParameter( 'param');
	              $scriptPtnSetTemplate.= "%sthis->%s = %sptn->getParameter( '%s' );%s";
	              $scriptPtnSetTemplate = sprintf($scriptPtnSetTemplate, chr(36), $param, chr(36), $param, chr(10));
		          } */
	          	// $this->include = 'urlTemplate';
              $scriptPtnSetTemplate.= "%sthis->include = '%s';%s";
              $scriptPtnSetTemplate = sprintf($scriptPtnSetTemplate, chr(36), $ptn->getTemplate(), chr(10));	          	
	          }      			
          }
      	}
	      elseif( count($patterns)>1 )
	      {
	      	// Regla momentanea de un solo patron
	        throw new sfException(sprintf('Aun no implementado la ejecucion de mas de un patron asociado a la actividad '.$activityXpdlName));
	      }   
      	
      	// Genero script de actualizacion de datafields por retorno del patron
        // Hoy UN SOLO patron         
        foreach( $patterns as $key => $pattern )
        {
          foreach( $pattern['Params'] as $param => $value )
          {
            if( isset($dataFields[$value]) )
            {
              // Es un dataField: $this->f->setDataField( 'datafield', $ptn->getParameter( 'param') );
              $scriptSetDF.= "%sthis->f->setDataField( '%s', %sptn->getParameter( '%s') );%s";
              $scriptSetDF = sprintf($scriptSetDF, chr(36), $value, chr(36), $param, chr(10));
            }
          }
        }
        
      }        
      else
      {
      	throw new sfException(sprintf('La Tarea '.$activityXpdlName.' bpmn es del tipo '.$activityType.' aun no implementada'));
      } 	

      // Genero script de determinacion de siguiente actividad
      // Para eso recupero las posibles siguientes actividades
      $nexts = $this->xpdlGetNextActivitiesName($nodeActivity);
      if( count($nexts) == 1 )
      {
      	// $next = 'nextActivity';
      	$scriptNA = "%snext = '%s';%s";
        $scriptNA = sprintf($scriptNA, chr(36), $nexts[0], chr(10));
      }
      else
      {
      	
      }
      
      $scripts = array(
        'set_datafields' => $scriptSetDF,
        'ptn_name' => $ptnName,
        'ptn_set_params' => $scriptPtnSetParams,
        'ptn_set_template' => $scriptPtnSetTemplate,
        'rules_next' => $scriptNA,
      );
        
    $arguments = array(
      'application' => $pMacroXpdlName,
      'module' => $pPackXpdlName,
      'action' => $this->parseActivityImplementationName($nodeActivity),
      'process_id' => $this->getId(),
      'process_name' => $this->getNombre(),
      'activity_name' => $activityXpdlName,
      'activity_type' => $activityType,
      'activity_is_autocomplete' => $activityIsAutocomplete?'1':'0',
      'scripts' => $scripts
    );
      
      $this->generateActivity( $arguments );
      
    }  	    
  }

  /**
   * Construccion de una actividad del proceso 
   * @param $pMacroXpdlName       Name xpdl del Paquete Macro
   * @param $pPackXpdlName        Name xpdl del Paquete
   * @param $pActXpdlName         Name xpdl de la actividad
   * @param $pActType             Tipo de actividad (Tarea Bpmn)
   * @param $pScripts             Scripts Php personalizacion actividad
   * @return unknown_type
   */
  public function generateActivity( $pArguments )
  {        
    
    $options = array();
    $app = new psdfGenerateActivity();
    $app->execute($pArguments, $options);
  }  
   
  public function xpdlGetDataFields($pDataFields)
  {
    $dataFields = $pDataFields;
    $xp = new domxpath( $this->xml );
    
    $nodeList = $xp->query( "/xpdl2:Package/xpdl2:WorkflowProcesses/xpdl2:WorkflowProcess[ @Id = \"" . $this->getXpdlId() . "\"]/xpdl2:DataFields/xpdl2:DataField" );
    foreach ( $nodeList as $node )
    {
      $id = $node->getAttribute( "Id" );
      $name = $node->getAttribute( "Name" );
      $isArray = $node->getAttribute( "IsArray" );
      $readOnly = $node->getAttribute( "ReadOnly" );
      
      $description = null;
      if( $node->getElementsByTagName("Description")->length > 0 )
        $description = $node->getElementsByTagName("Description")->item(0)->textContent;
              
      $initialValue = null;
      if( $node->getElementsByTagName("InitialValue")->length > 0 )
        $initialValue = $node->getElementsByTagName("InitialValue")->item(0)->textContent;
        
      $dataType = null;
      if( $node->getElementsByTagName("DataType")->length > 0 )
        $dataType = $node->getElementsByTagName("DataType")->item(0);
        
      // Tipo de dato basico
      $type = null;
      $length = null;
      $decimal = null;
      if( $dataType->getElementsByTagName("BasicType")->length > 0 )
      {
        $type = $dataType->getElementsByTagName("BasicType")->item(0)->getAttribute("Type");
        if( $dataType->getElementsByTagName("BasicType")->item(0)->getElementsByTagName("Length")->length > 0)
          $length = $dataType->getElementsByTagName("BasicType")
                    ->item(0)->getElementsByTagName("Length")->item(0)->textContent;
        if( $dataType->getElementsByTagName("BasicType")->item(0)->getElementsByTagName("Precision")->length > 0)
          $length = $dataType->getElementsByTagName("BasicType")
                    ->item(0)->getElementsByTagName("Precision")->item(0)->textContent;
        if( $dataType->getElementsByTagName("BasicType")->item(0)->getElementsByTagName("Scale")->length > 0)
          $decimal = $dataType->getElementsByTagName("BasicType")
                    ->item(0)->getElementsByTagName("Scale")->item(0)->textContent;
      }
      
      // Tipo de dato declarativo
      $declaredType = null;
      if( $dataType->getElementsByTagName("DeclaredType")->length > 0 )
      {
        $type = 'DeclaredType';
        $declaredType = $dataType->getElementsByTagName("DeclaredType")->item(0)->getAttribute('Id'); 
      }
      
      // Referencia Externa
      $externalReference = null;
      if( $dataType->getElementsByTagName("ExternalReference")->length > 0 )
      {
        $type = 'ExternalReference';
        $externalReference = 
          $dataType->getElementsByTagName("ExternalReference")->item(0)->getAttribute('location') . '|' . 
          $dataType->getElementsByTagName("ExternalReference")->item(0)->getAttribute('namespace') . '|' .
          $dataType->getElementsByTagName("ExternalReference")->item(0)->getAttribute('xref'); 
      }       

      $dataFields[$name] = array(
        'id' => $id,
        'isArray' => $isArray,
        'readOnly' => $readOnly,
        'description' => $description,
        'type' => $type,
        'length' => $length,
        'decimal' => $decimal,
        'externalReference' => $externalReference,      
        'declaredType' => $declaredType,
        'initialValue' => $initialValue
      );
    }
    return $dataFields;
  }

  public function xpdlGetParticipants($pParticipants)
  {
    $participants = $pParticipants;
    $xp = new domxpath( $this->xml );
    
    $nodeList = $xp->query( "/xpdl2:Package/xpdl2:Participants/xpdl2:Participant" );
    foreach ( $nodeList as $node )
    {
      $id = $node->getAttribute( "Id");
      $name = $node->getAttribute( "Name");
      
      $description = null;
      if( $node->getElementsByTagName("Description")->length > 0 )
        $description = $node->getElementsByTagName("Description")->item(0)->textContent;
      
      $type = null;
      if( $node->getElementsByTagName("ParticipantType")->length > 0 )
        $type = $node->getElementsByTagName("ParticipantType")->item(0)->getAttribute('Type');
        
      $participants[$name] = array(
          'id' => $id,
          'description' =>$description,
          'type' => $type,
        );
    }
    return $participants;
  }
    
  public function xpdlGetNextActivitiesName($nodeActivity)
  {
    $xp = new domxpath( $this->xml );
    $xp2 = new domxpath( $this->xml );
    
    $activitiesName = array();
    
    // Obtengo transiciones cuyo origen es la actividad actual
    $nodeList = $xp->query( "/xpdl2:Package/xpdl2:WorkflowProcesses/xpdl2:WorkflowProcess[ @Id = \"" . 
        $this->getXpdlId() . "\"]/xpdl2:Transitions/xpdl2:Transition[ @From=\"".$nodeActivity->getAttribute("Id")."\" ]" );
    foreach ( $nodeList as $node )
    {
    	// Obtengo el nodo y nombre de la actividad destino
      $nodeList2 = $xp2->query( "/xpdl2:Package/xpdl2:WorkflowProcesses/xpdl2:WorkflowProcess[ @Id = \"" . 
        $this->getXpdlId() . "\"]/xpdl2:Activities/xpdl2:Activity[ @Id=\"".$node->getAttribute("To")."\" ]" );
 
    	$activitiesName[] = $this->parseActivityImplementationName($nodeList2->item(0));
    }

    return $activitiesName;
  }
  
  public function xpdlGetPatterns($activityXpdlId)
  {
    $xp = new domxpath( $this->xml );
    $patterns = array();
    
    $nodeList = $xp->query( "/xpdl2:Package/xpdl2:WorkflowProcesses/xpdl2:WorkflowProcess[ @Id = \"" . 
        $this->getXpdlId() . "\"]/xpdl2:Activities/xpdl2:Activity[ @Id=\"".$activityXpdlId."\" ]/xpdl2:ExtendedAttributes/xpdl2:ExtendedAttribute[ @Name=\"PATRON\" or @Name=\"patron\" or @Name=\"Patron\" ]" );
    foreach ( $nodeList as $node )
    {
    	try{
        $pattern = sfYaml::load($node->textContent);
    	}catch (Exception $e)
      {
        throw new sfException(sprintf('No se pudo leer yml de llamada a patron: %s', $e->getMessage()));
      }
      
    	$patterns[key($pattern)] = $pattern[key($pattern)];      
    }

    return $patterns;  	
  }

  /**
   * Retorna el tipo de tarea/actividad estandarizada BPMN
   * @param $pNodeActivity
   * @return string 
   */
  public function xpdlGetActivityType($pNodeActivity)
  {
    // Por defecto vacio para las no implementadas aun
  	$activityType = '';
  	
    // Activity/Event/(StartEvent, IntermediateEvent, EndEvent)
  	$nodesEvent = $pNodeActivity->getElementsByTagName("Event");
  	if( $nodesEvent->length > 0 )
  	{
  		$types = array( 'StartEvent', 'IntermediateEvent', 'EndEvent' );
  		foreach( $types as $type)
  		{
  		  $nodes = $nodesEvent->item(0)->getElementsByTagName($type);
  		  if( $nodes->length > 0 )
  		  {
  		    $activityType = $type;
  		    break;
  		  }
  		}
  	}
  	    
    // Activity/Implementation/Task/(TaskService, TaskReceive, TaskManual,  
    // TaskReference, TaskScript, TaskSend, TaskUser, TaskApplication) 
    $nodesImpl = $pNodeActivity->getElementsByTagName("Implementation");
  	if( $nodesImpl->length > 0 )
  	{
  		$nodesTask = $nodesImpl->item(0)->getElementsByTagName("Task");
	    if( $nodesTask->length > 0 )
      {
	      $types = array( 'TaskService', 'TaskReceive', 'TaskManual', 'TaskReference',
	                      'TaskScript', 'TaskSend', 'TaskUser', 'TaskApplication' );
	      foreach( $types as $type)
	      {
	        $nodes = $nodesTask->item(0)->getElementsByTagName($type);
	        if( $nodes->length > 0 )
	        {
	          $activityType = $type;
	          break;
	        }
	      }
      }      	
  	}
  	    
    return $activityType;
  }
  
  /**
   * Verifica el tipo de finalizacion de la tarea.
   * Retorna True si la tarea se autocompleta o false si nó   * 
   * @param $pNodeActivity
   * @return bolean
   */
  public function xpdlGetActivityIsAutoComplete($activityXpdlId)
  {
    $xp = new domxpath( $this->xml );
    $valor="";
       
    $nodeList = $xp->query( "/xpdl2:Package/xpdl2:WorkflowProcesses/xpdl2:WorkflowProcess[ @Id = \"" . 
        $this->getXpdlId() . "\"]/xpdl2:Activities/xpdl2:Activity[ @Id=\"".$activityXpdlId."\" ]/xpdl2:ExtendedAttributes/xpdl2:ExtendedAttribute[ @Name=\"autocompletar\" or @Name=\"Autocompletar\" or @Name=\"AUTOCOMPLETAR\" ]" );
    foreach ( $nodeList as $node )
    {
      $valor = $node->getAttribute('Value'); // Si hay mas de uno va a tomar el ultimo
    }
    
    if( $valor=='1' or $valor=='true')
      return true;
    else
      return false;     	
  }

  public function xpdlGetActivityIsAutoStart($activityXpdlId)
  {
    
  }
  
  /**
   * Retorna el id xpdl del proceso. El id es el mismo 
   * id del objeto con un guion bajo delante.
   * id obj  => "123"
   * id xpdl => "_123"
   * @return string
   */
  function getXpdlId()
  {
    return '_'.$this->getId();
  }
  
  /**
   * Retorna el name xpdl del proceso. El Name es el mismo
   * nombre del objeto sin espacios blancos.
   * @return string
   */
  public function getXpdlName()
  {
    return str_replace(' ', '', $this->getNombre());
  }
  
  /**
   * Recupera el nombre que tendrá la actividad al implementarse
   * Ahora lo hace concatenando adelante el nombre del proceso.
   * @param $nodeActivity
   * @return string action
   */  
  public function parseActivityImplementationName($nodeActivity)
  {
  	$actType = $this->xpdlGetActivityType($nodeActivity);
  	
    // Fuerzo nombre de la accion con el nombre de proceso y actividad
    $action = $this->getXpdlName();
    if( $actType=='StartEvent' )     
      $action.= '_Start';
    elseif( $actType=='EndEvent' )
      $action.= '_End';
    else
      $action.= '_'.$nodeActivity->getAttribute("Name");

    return $action;
  }
  
}